
function usb_controller_final_2_config(this_block)

  % Revision History:
  %
  %   30-Jul-2011  (00:09 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Documents and Settings\Danny\Desktop\senior_project_my_code\senior_proj_my_code\usb_controller_final_2.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('usb_controller_final_2');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('flag');
  this_block.addSimulinkInport('data_in');
  this_block.addSimulinkInport('clk_usb');
  this_block.addSimulinkInport('en');

  this_block.addSimulinkOutport('led7');
  this_block.addSimulinkOutport('led3');
  this_block.addSimulinkOutport('led1');
  this_block.addSimulinkOutport('fd');
  this_block.addSimulinkOutport('fifoad');
  this_block.addSimulinkOutport('ifclk');
  this_block.addSimulinkOutport('sloe');
  this_block.addSimulinkOutport('pktend');
  this_block.addSimulinkOutport('slcs');
  this_block.addSimulinkOutport('slrd');
  this_block.addSimulinkOutport('slwr');

  led7_port = this_block.port('led7');
  led7_port.setType('UFix_1_0');
  led7_port.useHDLVector(false);
  led3_port = this_block.port('led3');
  led3_port.setType('UFix_1_0');
  led3_port.useHDLVector(false);
  led1_port = this_block.port('led1');
  led1_port.setType('UFix_1_0');
  led1_port.useHDLVector(false);
  fd_port = this_block.port('fd');
  fd_port.setType('UFix_8_0');
  fifoad_port = this_block.port('fifoad');
  fifoad_port.setType('UFix_2_0');
  ifclk_port = this_block.port('ifclk');
  ifclk_port.setType('UFix_1_0');
  ifclk_port.useHDLVector(false);
  sloe_port = this_block.port('sloe');
  sloe_port.setType('UFix_1_0');
  sloe_port.useHDLVector(false);
  pktend_port = this_block.port('pktend');
  pktend_port.setType('UFix_1_0');
  pktend_port.useHDLVector(false);
  slcs_port = this_block.port('slcs');
  slcs_port.setType('UFix_1_0');
  slcs_port.useHDLVector(false);
  slrd_port = this_block.port('slrd');
  slrd_port.setType('UFix_1_0');
  slrd_port.useHDLVector(false);
  slwr_port = this_block.port('slwr');
  slwr_port.setType('UFix_1_0');
  slwr_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('flag').width ~= 1);
      this_block.setError('Input data type for port "flag" must have width=1.');
    end

    this_block.port('flag').useHDLVector(false);

    if (this_block.port('data_in').width ~= 8);
      this_block.setError('Input data type for port "data_in" must have width=8.');
    end

    if (this_block.port('clk_usb').width ~= 1);
      this_block.setError('Input data type for port "clk_usb" must have width=1.');
    end

    this_block.port('clk_usb').useHDLVector(false);

    if (this_block.port('en').width ~= 1);
      this_block.setError('Input data type for port "en" must have width=1.');
    end

    this_block.port('en').useHDLVector(false);

  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);


  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('../senior_project_my_code/senior_proj_my_code/usb_controller_final_2.v');

return;


