
function usb_controller_config(this_block)

  % Revision History:
  %
  %   11-Jun-2011  (13:15 hours):
  %     Original code was machine generated by Xilinx's System Generator after parsing
  %     C:\Documents and Settings\Danny\Desktop\my_usb_is_much_better_than_phils\dans_usb\usb_controller.v
  %
  %

  this_block.setTopLevelLanguage('Verilog');

  this_block.setEntityName('usb_controller');

  % System Generator has to assume that your entity  has a combinational feed through; 
  %   if it  doesn't, then comment out the following line:
  this_block.tagAsCombinational;

  this_block.addSimulinkInport('clk');
  this_block.addSimulinkInport('rst');
  this_block.addSimulinkInport('flag_a');
  this_block.addSimulinkInport('flag_d');
  this_block.addSimulinkInport('data_in');

  this_block.addSimulinkOutport('f_data');
  this_block.addSimulinkOutport('fifo_adr');
  this_block.addSimulinkOutport('sloe');
  this_block.addSimulinkOutport('pktend');
  this_block.addSimulinkOutport('slcs');
  this_block.addSimulinkOutport('slrd');
  this_block.addSimulinkOutport('slwr');

  f_data_port = this_block.port('f_data');
  f_data_port.setType('UFix_16_0');
  fifo_adr_port = this_block.port('fifo_adr');
  fifo_adr_port.setType('UFix_2_0');
  sloe_port = this_block.port('sloe');
  sloe_port.setType('UFix_1_0');
  sloe_port.useHDLVector(false);
  pktend_port = this_block.port('pktend');
  pktend_port.setType('UFix_1_0');
  pktend_port.useHDLVector(false);
  slcs_port = this_block.port('slcs');
  slcs_port.setType('UFix_1_0');
  slcs_port.useHDLVector(false);
  slrd_port = this_block.port('slrd');
  slrd_port.setType('UFix_1_0');
  slrd_port.useHDLVector(false);
  slwr_port = this_block.port('slwr');
  slwr_port.setType('UFix_1_0');
  slwr_port.useHDLVector(false);

  % -----------------------------
  if (this_block.inputTypesKnown)
    % do input type checking, dynamic output type and generic setup in this code block.

    if (this_block.port('clk').width ~= 1);
      this_block.setError('Input data type for port "clk" must have width=1.');
    end

    this_block.port('clk').useHDLVector(false);

    if (this_block.port('rst').width ~= 1);
      this_block.setError('Input data type for port "rst" must have width=1.');
    end

    this_block.port('rst').useHDLVector(false);

    if (this_block.port('flag_a').width ~= 1);
      this_block.setError('Input data type for port "flag_a" must have width=1.');
    end

    this_block.port('flag_a').useHDLVector(false);

    if (this_block.port('flag_d').width ~= 1);
      this_block.setError('Input data type for port "flag_d" must have width=1.');
    end

    this_block.port('flag_d').useHDLVector(false);

    if (this_block.port('data_in').width ~= 16);
      this_block.setError('Input data type for port "data_in" must have width=16.');
    end

  end  % if(inputTypesKnown)
  % -----------------------------

  % System Generator found no apparent clock signals in the HDL, assuming combinational logic.
  % -----------------------------
   if (this_block.inputRatesKnown)
     inputRates = this_block.inputRates; 
     uniqueInputRates = unique(inputRates); 
     outputRate = uniqueInputRates(1);
     for i = 2:length(uniqueInputRates)
       if (uniqueInputRates(i) ~= Inf)
         outputRate = gcd(outputRate,uniqueInputRates(i));
       end
     end  % for(i)
     for i = 1:this_block.numSimulinkOutports 
       this_block.outport(i).setRate(outputRate); 
     end  % for(i)
   end  % if(inputRatesKnown)
  % -----------------------------

  config_phase = this_block.getConfigPhaseString;
  if (strcmpi(config_phase,'config_netlist_interface'))
    % (!) Set the inout port rate to be the same as the first input 
    %     rate. Change the following code if this is untrue.
    uniqueInputRates = unique(this_block.getInputRates);
    this_block.addInoutport('if_clk');

    if_clk_port = this_block.port('if_clk');
    if_clk_port.setType('UFix_1_0');
    if_clk_port.useHDLVector(false);
    if_clk_port.setRate(uniqueInputRates(1));
  end % End if config_netlist_interface

  % (!) Custimize the following generic settings as appropriate. If any settings depend
  %      on input types, make the settings in the "inputTypesKnown" code block.
  %      The addGeneric function takes  3 parameters, generic name, type and constant value.
  %      Supported types are boolean, real, integer and string.
  this_block.addGeneric('S0','integer','0');
  this_block.addGeneric('S1','integer','1');
  this_block.addGeneric('S2','integer','2');
  this_block.addGeneric('S3','integer','3');
  this_block.addGeneric('S4','integer','4');
  this_block.addGeneric('S5','integer','5');
  this_block.addGeneric('S6','integer','6');
  this_block.addGeneric('S7','integer','7');

  % Add addtional source files as needed.
  %  |-------------
  %  | Add files in the order in which they should be compiled.
  %  | If two files "a.vhd" and "b.vhd" contain the entities
  %  | entity_a and entity_b, and entity_a contains a
  %  | component of type entity_b, the correct sequence of
  %  | addFile() calls would be:
  %  |    this_block.addFile('b.vhd');
  %  |    this_block.addFile('a.vhd');
  %  |-------------

  %    this_block.addFile('');
  %    this_block.addFile('');
  this_block.addFile('../my_usb_is_much_better_than_phils/dans_usb/usb_controller.v');

return;


