##########################################################################
#   SDR Jove Main GUI Class.
#
#   Author: Phil Behnke
#
#   Date: 8/11/2011
##########################################################################

import wx
from AboutFrame import *
from RTConfigFrame import *
from FRConfigFrame import *
from RAConfigFrame import *
from gnu_radio import live_mode
from gnu_radio import record_mode
from gnu_radio import radio_astronomy
import subprocess
import signal
import time
import sys
import os
import random
import string
import stat


##########################################################################
# This is the main class.  It sets up the GUI and handles all the control
# and flow of the software.
##########################################################################   
class MainFrame(wx.Frame):

    ##########################################################################
    # Called when the GUI the created.
    ##########################################################################
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.CAPTION|wx.MINIMIZE_BOX|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FULL_REPAINT_ON_RESIZE|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.main_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.exit = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Exit", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.exit)
        self.main_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        self.live_mode = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Live Mode", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.live_mode)
        self.full_record = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Full Record", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.full_record)
        self.main_menubar.Append(wxglade_tmp_menu, "Configure")
        wxglade_tmp_menu = wx.Menu()
        self.about = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "About", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.about)
        self.main_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.main_menubar)
        # Menu Bar end
        self.main_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.main_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT|wx.TB_DOCKABLE|wx.TB_3DBUTTONS|wx.TB_HORZ_LAYOUT)
        self.SetToolBar(self.main_toolbar)
        self.main_toolbar.AddLabelTool(1, "Radio Astronomy", wx.Bitmap("./images/icons/ra.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Radio Astronomy Mode", "Radio Astronomy mode will plot the average energy over the entire spectrum over time.")
        self.main_toolbar.AddLabelTool(2, "Real Time Mode", wx.Bitmap("./images/icons/realtime.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Real Time Mode", "Real Time mode will display a waterplot plot of the spectrum, and optionally mix a selected bandwidth to audio.")
        self.main_toolbar.AddLabelTool(3, "Full Record", wx.Bitmap("./images/icons/record.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Full Record Mode", "Full Record mode will save unprocessed spectral data to a WAV file.")
        self.main_toolbar.AddLabelTool(4, "Data Analysis", wx.Bitmap("./images/icons/da.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Data Analysis Mode", "Data Analysis mode will process data captured in Full Record mode in Radio Astronomy mode")
        self.main_toolbar.AddSeparator()
        self.main_toolbar.AddLabelTool(5, "Start", wx.Bitmap("./images/icons/start.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Start", "Start capturing data")
        self.main_toolbar.AddLabelTool(6, "Stop", wx.Bitmap("./images/icons/stop.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Stop", "Stop capturing data")
        # Tool Bar end

        #save the old stdout (the terminal)
        self.oldstdout=sys.stdout
        #create the split frame for the console and the graph panes.
        self.main_area=TopSplitPanel(self)
        #change stdout to the console so we can just use "print"
        sys.stdout=self

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnExit, self.exit)
        self.Bind(wx.EVT_MENU, self.OnLiveMode, self.live_mode)
        self.Bind(wx.EVT_MENU, self.OnFullRecord, self.full_record)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.about)
        self.Bind(wx.EVT_TOOL, self.OnRAMode, id=1)
        self.Bind(wx.EVT_TOOL, self.OnRTMode, id=2)
        self.Bind(wx.EVT_TOOL, self.OnFRMode, id=3)
        self.Bind(wx.EVT_TOOL, self.OnDAMode, id=4)
        self.Bind(wx.EVT_TOOL, self.OnStart, id=5)
        self.Bind(wx.EVT_TOOL, self.OnStop, id=6)
        # end wxGlade


	    #make a random string for the temporary named pipe
        self.temp_pipe_filename='../'+''.join(random.choice(string.ascii_uppercase) for x in range(6))+".sdrjove"
	
        #var to tell if the driver is loaded
        self.isDriverLoaded=False
        #var to know whether to process to audio in live
        self.LM_audio=False
        #this is mode we are currently in
        self.configState=0
        #is the real time mode configured
        self.isRTModeConfig=False
        #is the full record mode configured
        self.isFRModeConfig=False
        #should we display a waterfall plot in full record mode
        self.FR_waterfall=True
        #should we display a graph in real time mode
        self.RT_shouldGraph=True
        #should we save a wav file in real time mode
        self.RT_shouldWAV=False
        #should we output to the sound card in real time mode
        self.RT_shouldAudio=False
        #freq to adjust the audio mixer by
        self.RT_mixer_adj=0
        #bandwidth of the audio filter
        self.RT_bw=25
        #is the system running
        self.running=False
        #data analysis mode sink filename
        self.DA_sink_filename=""
        #data analysis mode source filename
        self.DA_source=""
        #should we save a file in data analysis mode
        self.DA_should_save_file=False

        #open up the timestamp database
        self.time_database=open('./time_database.txt','a')

        #register the signal handler for sigint
        signal.signal(signal.SIGINT, self.OnSigInt)

    #created by wxGlade, sets some properties of the GUI
    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("GVSU Physics SDRJove")
        self.main_statusbar.SetStatusWidths([-1])
        # statusbar fields
        main_statusbar_fields = ["GVSU Physics SDRJove Project"]
        for i in range(len(main_statusbar_fields)):
            self.main_statusbar.SetStatusText(main_statusbar_fields[i], i)
        self.main_toolbar.Realize()
        # end wxGlade

    #created by wxglade, sets the layout
    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(main_sizer)
        main_sizer.Add(self.main_area,2,wx.EXPAND | wx.ALL)
        main_sizer.Fit(self)
        self.Layout()


    ##########################################################################
    # Signal handler for sigint, tries to exit gracefully
    ##########################################################################
    def OnSigInt(self, num, stack):

        #kill the driver
        try:
            self.driver.send_signal(signal.SIGINT)
        except (AttributeError):
            pass
        except (OSError):
            pass

        #remove the named pipe
        subprocess.call(['rm', '-f', self.temp_pipe_filename])
        time.sleep(0.5)

        #close the timestamp database
        self.time_database.close()
        
        #exit
        os._exit(0)


    ##########################################################################
    # Called when the user clicks the exit button in the menu
    ##########################################################################
    def OnExit(self, event): # wxGlade: MainFrame.<event_handler>
        #return stdout
        sys.stdout=self.oldstdout

        #stop any GNURadio objects if they are running
        if self.running:
            self.tb.stop()

        #send a couple sigints to the driver to get it to close
        try:
            self.driver.send_signal(signal.SIGINT)
            self.driver.send_signal(signal.SIGINT)
        except (AttributeError):
            pass
        except (OSError):
            pass

        #remove the named pipe
        subprocess.call(['rm', '-f', self.temp_pipe_filename])
        time.sleep(0.5)

        #close the timestamp database
        self.time_database.close()
        
        #exit
        os._exit(0)



    ##########################################################################
    # User selects the Live Mode configuration box
    ##########################################################################
    def OnLiveMode(self, event):

        #display the config box
        rtconfig=RTConfigFrame(self)
        ret=rtconfig.ShowModal()

        #default config options
        self.RT_shouldGraph=True
        self.RT_shouldWAV=False
        self.RT_shouldAudio=False

        
        if ret==wx.ID_OK:
            if rtconfig.checkbox_1.GetValue(): #process to audio
                self.LM_audio=True

                if rtconfig.save_audio_checkbox.GetValue():
                    self.RT_shouldWAV=True #save as wav

                if rtconfig.speaker_checkbox.GetValue():
                    self.RT_shouldAudio=True #output to sound card

                self.RT_mixer_adj=rtconfig.ce_freq_spin_ctrl.GetValue()
                self.RT_bw=rtconfig.bw_spin_ctrl.GetValue()

            if rtconfig.waterfall_checkbox.GetValue():
                self.RT_shouldGraph=True    #should we display a plot
            
            if self.LM_audio or self.RT_shouldGraph:
                self.isRTModeConfig=True

        event.Skip()

    ##########################################################################
    # Select the Full Record Mode configuration box
    ##########################################################################
    def OnFullRecord(self, event): # wxGlade: MainFrame.<event_handler>

        #display the window
        frconfig=FRConfigFrame(self)
        ret=frconfig.ShowModal()

        #user clicked ok
        if ret==wx.ID_OK:

            #display a plot
            if frconfig.plot_checkbox.IsChecked():
                self.FR_waterfall=True
            else:
                self.FR_waterfall=False

            #if the user only wants to record to a file size, start a timer to check the size of the file
            #as it is being recorded
            if frconfig.file_size_radio_box.GetSelection()==1:
                #setup timer to check file size
                self.FileSizeTimer=wx.Timer(self)
                self.Bind(wx.EVT_TIMER,self.OnFileSizeTimer,self.FileSizeTimer)
                self.maxFileSize=frconfig.spin_ctrl_1.GetValue()

            #we are configed
            self.isFRModeConfig=True
        event.Skip()

    ##########################################################################
    # Show the About Box
    ##########################################################################
    def OnAbout(self, event): # wxGlade: MainFrame.<event_handler>
        about=AboutFrame(None, -1, "")
        about.Show()
        event.Skip()

    ##########################################################################
    # Set the current mode to Radio Astronomy
    ##########################################################################
    def OnRAMode(self, event): # wxGlade: MainFrame.<event_handler>
        #load driver
        if self.isDriverLoaded:
            pass
        else:
            self.loadDriver()

        #make sure the driver is loaded
        if self.isDriverLoaded:
            self.RA_sink_filename=""
            dlg =wx.MessageDialog(None, "Would you like to record to a file?","Live Mode Not Configured", wx.YES_NO | wx.ICON_QUESTION)
            ret=dlg.ShowModal()
            #user clicked yes to save file
            if ret == wx.ID_YES:
                self.RA_should_save_file=True
                file_selection=wx.FileDialog(self, "Choose a file to save data to.",style=wx.FD_SAVE)
                ret=file_selection.ShowModal()
                if ret==wx.ID_OK:
                    self.RA_sink_filename=file_selection.GetPath()
            else:
                self.RA_should_save_file=False
            print "Running in Radio Astronomy Mode. Click Start to begin capturing data."
            self.configState="RA"

        event.Skip()

    ##########################################################################
    # Set the current mode to Real Time
    ##########################################################################
    def OnRTMode(self, event): # wxGlade: MainFrame.<event_handler>
        #Make sure we are configured
        if self.isRTModeConfig==False:
            dlg =wx.MessageDialog(None, "You must configure Live Mode first.","Live Mode Not Configured", wx.OK | wx.ICON_WARNING)
            dlg.ShowModal()
            event.Skip()
            return None

        #load driver
        if self.isDriverLoaded:
            pass
        else:
            self.loadDriver()

        #the driver is loaded
        if self.isDriverLoaded:
            self.wav_filename=""
            #should we record a wav file?
            if self.RT_shouldWAV:
                file_selection=wx.FileDialog(self, "Choose a file to save data to.",style=wx.FD_SAVE)
                ret=file_selection.ShowModal()
                if ret==wx.ID_OK:
                    self.wav_filename=file_selection.GetPath()
                    print "Running in Real Time Mode. Click Start to begin capturing data."
                    self.configState="RT"

            else:
                print "Running in Real Time Mode. Click Start to begin capturing data."
                self.configState="RT"

        event.Skip()

    ##########################################################################
    # Set the current mode to Full Record
    ##########################################################################
    def OnFRMode(self, event): # wxGlade: MainFrame.<event_handler>

        #make sure we are configured
        if self.isFRModeConfig==False:
            dlg =wx.MessageDialog(None, "You must configure Full Record Mode first.","Full Record Not Configured", wx.OK | wx.ICON_WARNING)
            dlg.ShowModal()
            event.Skip()
            return None

        #load the driver
        if self.isDriverLoaded:
            pass
        else:
            self.loadDriver()

        if self.isDriverLoaded:
            #popup here to select filepath
            file_selection=wx.FileDialog(self, "Choose a file to save data to.",style=wx.FD_SAVE)
            ret=file_selection.ShowModal()
            if ret==wx.ID_OK:
                self.FR_sink_filename=file_selection.GetPath()
                #os.mknod(self.sink_filename,stat.S_IFREG)
                print "Running in Full Record Mode. Storing data in file: %s" % self.FR_sink_filename
                print "Click Start to begin capturing data."
                self.configState="FR"

        event.Skip()

    ##########################################################################
    # Set current mode to Data Analysis
    ##########################################################################
    def OnDAMode(self, event): # wxGlade: MainFrame.<event_handler>
        #no need to load driver here.
        #select a source file
        file_selection=wx.FileDialog(self, "Choose a file to load data from.",style=wx.FD_OPEN)
        ret=file_selection.ShowModal()
        if ret==wx.ID_OK:
            self.DA_source=file_selection.GetPath()
            print "Running in Data Analysis Mode. Click Start to begin capturing data."
            self.configState="DA"   
            dlg =wx.MessageDialog(None, "Would you like to record to a file?","Record?", wx.YES_NO | wx.ICON_QUESTION)
            ret=dlg.ShowModal()
            if ret == wx.ID_YES:
                self.DA_should_save_file=True
                file_selection=wx.FileDialog(self, "Choose a file to save data to.",style=wx.FD_SAVE)
                ret=file_selection.ShowModal()
                if ret==wx.ID_OK:
                    self.DA_sink_filename=file_selection.GetPath()
                else:	    
                    self.DA_should_save_file=False
        
        event.Skip()

    ##########################################################################
    # User clicks the start button.
    ##########################################################################
    def OnStart(self, event): # wxGlade: MainFrame.<event_handler>

        #start hasn't been selected
        if self.configState==0:
            dlg =wx.MessageDialog(None, "Error: No mode selected. Set the mode to capture data in.", "Not Configured.", wx.OK |\
														 wx.ICON_WARNING)
            dlg.ShowModal()
            event.Skip()
            return None

        #real time mode
        elif self.configState=='RT':
            #wake up the driver
            self.driver.send_signal(signal.SIGUSR1)
            #fire up GNU Radio
            self.tb = live_mode.top_block(self,self.temp_pipe_filename,self.wav_filename,self.RT_shouldGraph,self.RT_shouldWAV,self.RT_shouldAudio,self.RT_mixer_adj,self.RT_bw)

            print "Running Real Time Mode..."
            if self.RT_shouldWAV:
                #store wav file timestamp
                self.storeTime(self.wav_filename)

            self.running=True
            #kick off the GNU Radio block
            self.tb.Run()
            self.tb._frame.Show(False)
            
            
        #full record mode
        elif self.configState=='FR':
            #wake up the driver
            self.driver.send_signal(signal.SIGUSR1)
            #fire up GNU Radio
            self.tb = record_mode.top_block(self,self.temp_pipe_filename,self.FR_sink_filename,self.FR_waterfall)
            try:
                self.FileSizeTimer.Start(100)
            except (AttributeError):
                pass
            print "Running In Full Record Mode..."
            
            #store sink file timestamp
            self.storeTime(self.FR_sink_filename)
            self.running=True
            #kick off the GNU Radio block
            self.tb.Run()
            self.tb._frame.Show(False)

        #data analysis
        elif self.configState=='DA':
            #fire up GNU Radio
            self.tb = radio_astronomy.top_block(self,self.DA_source,self.DA_sink_filename,self.DA_should_save_file)
            print "Running In Data Analysis Mode..."
            self.running=True
            #kick off the GNU Radio block
            self.tb.Run()
            print "done"
            self.tb._frame.Show(False)

        #radio astronomy mode
        elif self.configState=='RA':
            #wake up the driver
            self.driver.send_signal(signal.SIGUSR1)
            #fire up GNU Radio
            self.tb = radio_astronomy.top_block(self,self.temp_pipe_filename,self.RA_sink_filename,self.RA_should_save_file)
            print "Running In Radio Astronomy Mode..."
            self.running=True
            #kick off the GNU Radio block
            self.tb.Run()
            self.tb._frame.Show(False)

        event.Skip()

    ##########################################################################
    # User clicks Stop
    ##########################################################################
    def OnStop(self, event): # wxGlade: MainFrame.<event_handler>

        #stop the GNU Radio block
        try:
            self.tb.stop()
            self.tb._app.Exit()
            #pause the driver
            try:
                self.driver.send_signal(signal.SIGUSR2)
            except(OSError):
                #check the state of the driver, is it still running?
                self.checkprocess()

        except (AttributeError):
            if event!= None:
                event.Skip()
                return None

        #we are in real time mode
        if self.configState=='RT':
            if self.RT_shouldGraph == True:
                self.tb.wxgui_waterfallsink2_0.win.Close()
                


        #we are in full record mode
        elif self.configState=='FR':
            try:
                #stop the timer
                self.FileSizeTimer.Stop()
            except (AttributeError):
                pass
            if self.FR_waterfall==True:
                self.tb.wxgui_waterfallsink2_0.win.Close()

        #we are in radio astronomy mode
        elif self.configState=='RA':
            self.tb.wxgui_scopesink2_0.win.Close()

        #we are in data analysis mode
        elif self.configState=='DA':
            self.tb.wxgui_scopesink2_0.win.Close()

        if self.configState!=0:
            print "Stopped."

        self.running=False
        self.configState=0

        if event!= None:
            event.Skip()

    ##########################################################################
    # Override the write() function so we can just call "print" to write to the console.
    ##########################################################################
    def write(self, text):
        self.main_area.console.consoleTextBox.AppendText(text)

    ##########################################################################
    # See if the driver is still loaded
    ##########################################################################
    def checkprocess(self):
        time.sleep(1)
        if self.driver.poll() != None:
            dlg =wx.MessageDialog(None, "Oops, an error happened.  Check the output in the terminal.", "Error.", wx.OK |\
													wx.ICON_WARNING)
            dlg.ShowModal()
            return False
        else:
            return True

    ##########################################################################
    # Load the driver if needed
    ##########################################################################
    def loadDriver(self):
        self.driver=subprocess.Popen(['../usb_driver/data_recorder', '-f', self.temp_pipe_filename, '-l'])
        self.configState=0
        if self.checkprocess():
            self.isDriverLoaded=True
	
    ##########################################################################
    # Called from the timer to check the current file size every 100 ms in DA mode.
    ##########################################################################	
    def OnFileSizeTimer(self,event):
        try:
            currentFileStat=os.stat(self.FR_sink_filename)
        except (OSError):
            return None
        size=currentFileStat.st_size
        size=size/(2**20)
        if size > self.maxFileSize:
            self.FileSizeTimer.Stop()
            print "Maximum File Size Reached"
            self.OnStop(None)
        event.Skip()

    ##########################################################################
    # Store the filename and the current time in time database file.
    ##########################################################################
    def storeTime(self,filename):
        time_struct=time.localtime()
        year=time_struct.tm_year
        month=time_struct.tm_mon
        day=time_struct.tm_mday
        hour=time_struct.tm_hour
        minutes=time_struct.tm_min
        secs=time_struct.tm_sec

        line=""+str(filename)+':'+':'+str(month)+'/'+str(day)+'/'+str(year)+':'+str(hour)+':'+str(minutes)+':'+str(secs)+"\n"

        self.time_database.write(line)

# end of class MainFrame


#defines the console panel.
class ConsoleFrame(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent)
        
        #create a boxsizer to control how objects are spaced
        vboxSizer=wx.BoxSizer(wx.VERTICAL)
        #set the background to white
        self.SetBackgroundColour(wx.WHITE)
        
        #add text so the user knows that area is the console
        title=wx.StaticText(self,label="Console:")
        
        #add a text box which will contain the console text
        self.consoleTextBox=wx.TextCtrl(self,style=wx.TE_MULTILINE | wx.TE_DONTWRAP | wx.TE_READONLY )
        
        #add the text to the sizer
        vboxSizer.Add(title)
        #add the text box to the sizer
        vboxSizer.Add(self.consoleTextBox, 1, wx.EXPAND | wx.ALL)
        
        self.SetSizer(vboxSizer)


class GraphFrame(wx.Panel):
    def __init__(self,parent):
        wx.Panel.__init__(self,parent)
        
        #create a boxsizer to control how objects are spaced
        self.vboxSizer=wx.BoxSizer(wx.VERTICAL)
        #set the background to white
        self.SetBackgroundColour(wx.WHITE)
        
        #add text so the user knows that area is the console
        title=wx.StaticText(self,label="Graph:")
        #add the text to the sizer
        self.vboxSizer.Add(title, 1, wx.EXPAND | wx.ALL|wx.ALIGN_CENTER)
        
        self.SetSizer(self.vboxSizer)

#this class splits the frame into two sections (one for the interface and one for the console)
class TopSplitPanel(wx.SplitterWindow):
    def __init__(self,parent):
        wx.SplitterWindow.__init__(self,parent)
        #create the two panels 
        self.graph_frame=GraphFrame(self)
        self.console = ConsoleFrame(self)
        #split the frame and add the panels
        self.SplitHorizontally(self.graph_frame,self.console, -150)
        self.graph_frame.Fit()
        self.SetMinimumPaneSize(100)

