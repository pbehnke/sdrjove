# -*- coding: utf-8 -*-
# generated by wxGlade 0.6.3 on Sun Feb 27 15:51:34 2011

import wx
from AboutFrame import *
from RTConfigFrame import *
from FRConfigFrame import *
from RAConfigFrame import *


# begin wxGlade: dependencies
# end wxGlade

# begin wxGlade: extracode

# end wxGlade

class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = wx.CAPTION|wx.CLOSE_BOX|wx.MINIMIZE_BOX|wx.MAXIMIZE|wx.MAXIMIZE_BOX|wx.SYSTEM_MENU|wx.RESIZE_BORDER|wx.FULL_REPAINT_ON_RESIZE|wx.CLIP_CHILDREN
        wx.Frame.__init__(self, *args, **kwds)
        
        # Menu Bar
        self.main_menubar = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        self.exportcsv = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Export CSV", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.exportcsv)
        self.exportwav = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Export WAV", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.exportwav)
        self.saveplot = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Save Plot", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.saveplot)
        self.exit = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Exit", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.exit)
        self.main_menubar.Append(wxglade_tmp_menu, "File")
        wxglade_tmp_menu = wx.Menu()
        self.ra_mode = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Radio Astronomy", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.ra_mode)
        self.live_mode = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Live Mode", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.live_mode)
        self.full_record = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Full Record", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.full_record)
        self.data_analysis = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Data Analysis", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.data_analysis)
        self.main_menubar.Append(wxglade_tmp_menu, "Configure")
        wxglade_tmp_menu = wx.Menu()
        self.help = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "Help", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.help)
        self.about = wx.MenuItem(wxglade_tmp_menu, wx.NewId(), "About", "", wx.ITEM_NORMAL)
        wxglade_tmp_menu.AppendItem(self.about)
        self.main_menubar.Append(wxglade_tmp_menu, "Help")
        self.SetMenuBar(self.main_menubar)
        # Menu Bar end
        self.main_statusbar = self.CreateStatusBar(1, 0)
        
        # Tool Bar
        self.main_toolbar = wx.ToolBar(self, -1, style=wx.TB_HORIZONTAL|wx.TB_FLAT|wx.TB_DOCKABLE|wx.TB_3DBUTTONS|wx.TB_HORZ_LAYOUT)
        self.SetToolBar(self.main_toolbar)
        self.main_toolbar.AddLabelTool(1, "Radio Astronomy", wx.Bitmap("/home/phil/sdr gui/images/icons/ra.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Radio Astronomy Mode", "Radio Astronomy mode will plot the average energy over the entire spectrum over time.")
        self.main_toolbar.AddLabelTool(2, "Real Time Mode", wx.Bitmap("/home/phil/sdr gui/images/icons/realtime.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Real Time Mode", "Real Time mode will display a waterplot plot of the spectrum, and optionally mix a selected bandwidth to audio.")
        self.main_toolbar.AddLabelTool(3, "Full Record", wx.Bitmap("/home/phil/sdr gui/images/icons/record.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Full Record Mode", "Full Record mode will save unprocessed spectral data to a WAV file.")
        self.main_toolbar.AddLabelTool(4, "Data Analysis", wx.Bitmap("/home/phil/sdr gui/images/icons/da.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Enter Data Analysis Mode", "Data Analysis mode will process data captured in Full Record mode in Radio Astronomy mode")
        self.main_toolbar.AddSeparator()
        self.main_toolbar.AddLabelTool(5, "Start", wx.Bitmap("/home/phil/sdr gui/images/icons/start.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Start", "Start capturing data")
        self.main_toolbar.AddLabelTool(6, "Stop", wx.Bitmap("/home/phil/sdr gui/images/icons/stop.bmp", wx.BITMAP_TYPE_ANY), wx.NullBitmap, wx.ITEM_NORMAL, "Stop", "Stop capturing data")
        # Tool Bar end

        self.__set_properties()
        self.__do_layout()

        self.Bind(wx.EVT_MENU, self.OnExportCSV, self.exportcsv)
        self.Bind(wx.EVT_MENU, self.OnExportWAV, self.exportwav)
        self.Bind(wx.EVT_MENU, self.OnSavePlot, self.saveplot)
        self.Bind(wx.EVT_MENU, self.OnExit, self.exit)
        self.Bind(wx.EVT_MENU, self.OnRA, self.ra_mode)
        self.Bind(wx.EVT_MENU, self.OnLiveMode, self.live_mode)
        self.Bind(wx.EVT_MENU, self.OnFullRecord, self.full_record)
        self.Bind(wx.EVT_MENU, self.OnDataAnalysis, self.data_analysis)
        self.Bind(wx.EVT_MENU, self.OnHelp, self.help)
        self.Bind(wx.EVT_MENU, self.OnAbout, self.about)
        self.Bind(wx.EVT_TOOL, self.OnRAMode, id=1)
        self.Bind(wx.EVT_TOOL, self.OnRTMode, id=2)
        self.Bind(wx.EVT_TOOL, self.OnFRMode, id=3)
        self.Bind(wx.EVT_TOOL, self.OnDAMode, id=4)
        self.Bind(wx.EVT_TOOL, self.OnStart, id=5)
        self.Bind(wx.EVT_TOOL, self.OnStop, id=6)
        # end wxGlade

    def __set_properties(self):
        # begin wxGlade: MainFrame.__set_properties
        self.SetTitle("GVSU Physics SDRJove")
        self.main_statusbar.SetStatusWidths([-1])
        # statusbar fields
        main_statusbar_fields = ["GVSU Physics SDRJove Project"]
        for i in range(len(main_statusbar_fields)):
            self.main_statusbar.SetStatusText(main_statusbar_fields[i], i)
        self.main_toolbar.Realize()
        # end wxGlade

    def __do_layout(self):
        # begin wxGlade: MainFrame.__do_layout
        main_sizer = wx.BoxSizer(wx.VERTICAL)
        self.SetSizer(main_sizer)
        main_sizer.Fit(self)
        self.Layout()
        self.Centre()
        # end wxGlade

    def OnExportCSV(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnExportCSV' not implemented!"
        event.Skip()

    def OnExportWAV(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnExportWAV' not implemented!"
        event.Skip()

    def OnSavePlot(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnSavePlot' not implemented!"
        event.Skip()

    def OnExit(self, event): # wxGlade: MainFrame.<event_handler>
        self.Close()
	event.Skip()

    def OnRA(self, event): # wxGlade: MainFrame.<event_handler>
        raconfig=RAConfigFrame(None, -1, "")
	raconfig.Show()
        event.Skip()

    def OnLiveMode(self, event): # wxGlade: MainFrame.<event_handler>
        rtconfig=RTConfigFrame(None, -1, "")
	rtconfig.Show()
        event.Skip()

    def OnFullRecord(self, event): # wxGlade: MainFrame.<event_handler>
        frconfig=FRConfigFrame(None, -1, "")
	frconfig.Show()
        event.Skip()

    def OnDataAnalysis(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnDataAnalysis' not implemented!"
        event.Skip()

    def OnHelp(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnHelp' not implemented!"
        event.Skip()

    def OnAbout(self, event): # wxGlade: MainFrame.<event_handler>
        about=AboutFrame(None, -1, "")
	about.Show()
        event.Skip()

    def OnRAMode(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnRAMode' not implemented!"
        event.Skip()

    def OnRTMode(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnRTMode' not implemented!"
        event.Skip()

    def OnFRMode(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnFRMode' not implemented!"
        event.Skip()

    def OnDAMode(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnDAMode' not implemented!"
        event.Skip()

    def OnStart(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnStart' not implemented!"
        event.Skip()

    def OnStop(self, event): # wxGlade: MainFrame.<event_handler>
        print "Event handler `OnStop' not implemented!"
        event.Skip()

# end of class MainFrame


